const path = require('path');
const fs = require('fs');
const util = require('util');
const readDir = util.promisify(fs.readdir);
const writeFile = util.promisify(fs.writeFile);

(async function () {
  try {
    const stylesFolder = path.join(__dirname, '../../../../public/css/hljs');
    const stylesPath = path.join(__dirname, 'index.ts');
    const styles = await getCssFiles(stylesFolder, 'css/hljs');
    await writeStyles(styles, stylesPath);
  } catch (error) {
    console.log('[generateStyles.js]', error);
  }
})();

async function getCssFiles(dirPath, prefix = './') {
  try {
    const fileList = await readDir(dirPath);
    return fileList
      .filter(file => /\.css$/i.test(file))
      .map(file => ({
        path: path.join(prefix, file),
        name: file
          .replace(/\.css$/i, '')
          .replace(/[^A-Z0-9]/gi, ' ')
          .replace(/(^\w|\s\w)/g, m => m.toUpperCase()),
      }))
      .reduce((acc, cur) => {
        acc[cur.name] = cur.path;
        return acc;
      }, {});
  } catch (error) {
    console.log('[styleCreator.js]', error);
  }
}

async function writeStyles(styles, filePath) {
  try {
    const json = JSON.stringify(styles);
    const content = `// This file is auto generated by generateIndex.js\n\nconst styles = ${json};\n\nexport default styles;`;
    await writeFile(filePath, content, { encoding: 'utf-8' });
    console.log('[styleCreator.js] File created!');
  } catch (error) {
    console.log('[styleCreator.js]', error);
  }
}
